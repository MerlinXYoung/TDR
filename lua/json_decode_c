g_output_file = ''
g_fout = nil

function get_value_string(val)
	if(val.type == 'refer')then
		return val.value
	elseif(val.type == 'char')then
		return string.format("'%q'", val.value)
	elseif(val.type == 'bool')then
		if(val.value)then
			return 'true'
		else
			return 'false'
		end
	elseif(val.type == 'string')then
		return string.format('"%q"', val.value)
	elseif(val.type == 'int64')then
		return string.format('%d', val.value)
	elseif(val.type == 'hex_int64')then
		return string.format('%X', val.value)
	elseif(val.type == 'uint64')then
		return string.format('%u', val.value)
	elseif(val.type == 'hex_uint64')then
		return string.format('%X', val.value)
	end
end

function get_type_string(type)
	if(type.type == 'int8')then
		return 'int8'
	elseif(type.type == 'int16')then
		return 'int16'
	elseif(type.type == 'int32')then
		return 'int32'
	elseif(type.type == 'int64')then
		return 'int64'
	elseif(type.type == 'uint8')then
		return 'uint8'
	elseif(type.type == 'uint16')then
		return 'uint16'
	elseif(type.type == 'uint32')then
		return 'uint32'
	elseif(type.type == 'uint64')then
		return 'uint64'
	elseif(type.type == 'char')then
		return 'char'
	elseif(type.type == 'string')then
		return 'char'
	elseif(type.type == 'double')then
		return 'double'
	elseif(type.type == 'bool')then
		return 'bool'
	elseif(type.type == 'refer')then
		return type.refer
	end
end

function on_document_begin(file)
	len = string.len(file)
	prefix = string.sub(file, 1, len - 9)
	suffix = string.sub(file, len - 8, len)
	if(suffix == "_json.tdr")then
		g_output_file = prefix .. '_json_decode.c'
	else
		g_output_file = file .. '_json_decode.c'
	end

	g_fout = io.open(g_output_file, "w")


	g_fout:write('#include "json-c/json.h"\n')
	g_fout:write('#include <stddef.h>\n')
	g_fout:write('#include <stdbool.h>\n')
	g_fout:write('#include <stdint.h>\n')
	g_fout:write('#include <string.h>\n')
	g_fout:write('\n')
	g_fout:write(string.format('#include "%s"\n', prefix .. '_json_types.h'))
	g_fout:write(string.format('#include "%s"\n', prefix .. '_json_decode.h'))
	g_fout:write('\n')
	g_fout:write('\n')
	g_fout:write('\n')
end

function on_document_end()
	g_fout.close()
	make_rule(g_output_file)
end

function on_document_error()
	if(g_fout ~= nil)then
		g_fout:close()
	end
	os.remove(g_output_file)
end

function on_import(file)
	len = string.len(file)
	prefix = string.sub(file, 1, len - 4)
	suffix = string.sub(file, len - 3, len)
	if(suffix == ".tdr")then
		real_file = prefix .. '_json_decode.h'
	else
		real_file = name .. '_json_decode.h'
	end

	g_fout:write('#include "' .. real_file .. '"\n')
end

function on_typedef(type, name)
end

function on_const(type, real_type, val)
end

function on_enum_begin(name)
end

function on_enum_field(name, val, comment)
end

function on_enum_end()
end

function on_union_begin(name, etype)
end

function on_union_field(key, type, real_type, name, comment)
end

function on_union_end()
end


function on_struct_begin(name)
	g_fout:write(string.format('bool %s__json_decode(%s_t *self, json_object *jo_root)\n', name, name))
	g_fout:write('{\n')
	g_fout:write('\tjson_object *jo_val = NULL;\n')
end

function on_struct_field(condition, type, real_type, vec_size, name, comment)
	if(condition ~= nil)then
		if(condition.oper ~= nil)then
			op1_string = get_value_string(condition.op1)
			g_fout:write('\tif' .. ' (self->' .. condition.op0 .. ' ' .. condition.oper .. ' ' .. op1_string .. ')\n')
			g_fout:write('\t{\n')
		else
			g_fout:write('\tif' .. ' (self->' .. condition.op0 .. ')\n')
			g_fout:write('\t{\n')
		end
	else
		g_fout:write('\t{\n')
	end

	g_fout:write(string.format('\t\tif(!json_object_object_get_ex(jo_root, "%s", &jo_val))\n', name))
    g_fout:write('\t\t{\n')
	g_fout:write('\t\t\tgoto error_ret;\n')
	g_fout:write('\t\t}\n')

	if(type.type == 'bool')then
		g_fout:write('\t\tif(!json_object_is_type(jo_val, json_type_boolean))\n')
		g_fout:write('\t\t{\n')
		g_fout:write('\t\t\tgoto error_ret;\n')
		g_fout:write('\t\t}\n')
		g_fout:write('\t\tself->result = json_object_get_boolean(jo_val) == TRUE?true:false;\n')
	elseif(type.type == 'string')then
		g_fout:write('\t\tif(!json_object_is_type(jo_val, json_type_string))\n')
		g_fout:write('\t\t{\n')
		g_fout:write('\t\t\tgoto error_ret;\n')
		g_fout:write('\t\t}\n')
		g_fout:write(string.format('\t\tmemcpy(self->%s, json_object_get_string(jo_val), (size_t)json_object_get_string_len(jo_val));\n', name))
		g_fout:write(string.format('\t\tself->%s[%s - 1] = 0;\n', name, type.length))
	end

	if(comment ~= nil)then
		g_fout:write('//' .. comment)
	end

	g_fout:write('\t}\n')
end

function on_struct_end()
	g_fout:write('\treturn true;\n')
	g_fout:write('error_ret:\n')
	g_fout:write('\treturn false;\n')
	g_fout:write('}\n')
	g_fout:write('\n')
end

function on_comment(comment)
	g_fout:write(comment .. '\n')
end
