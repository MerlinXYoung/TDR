g_output_file = ''
g_fout = nil

function on_document_begin(file)
	len = string.len(file)
	prefix = string.sub(file, 1, len - 4)
	suffix = string.sub(file, len - 3, len)
	if(suffix == ".tdr")then
		g_output_file = prefix .. '_json_reader.c'
	else
		g_output_file = file .. '_json_reader.c'
	end

	g_fout = io.open(g_output_file, "w")
end

function on_document_end()
	g_fout.close()
end

function on_document_error()
	if(g_fout ~= nil)then
		g_fout:close()
	end
	os.remove(g_output_file)
end

function on_import(file)
	len = string.len(file)
	prefix = string.sub(file, 1, len - 4)
	suffix = string.sub(file, len - 3, len)
	if(suffix == ".tdr")then
		real_file = prefix .. '_json_reader.h'
	else
		real_file = name .. '_json_reader.h'
	end

	g_fout:write('#include "' .. real_file .. '"\n')
end

function on_typedef(type, type_arg, newtype)
	g_fout:write(type .. newtype)
end

function get_value_string(val)
	if(val ~= nil)then
		if(val.type == 'identifier')then
			return val.value
		elseif(val.type == 'char')then
			return string.format("'%q'", val.value)
		elseif(val.type == 'bool')then
			if(val.value)then
				return 'true'
			else
				return 'false'
			end
		elseif(val.type == 'string')then
			return string.format('"%q"', val.value)
		elseif(val.type == 'int64')then
			return string.format('%d', val.value)
		elseif(val.type == 'hex_int64')then
			return string.format('%X', val.value)
		elseif(val.type == 'uint64')then
			return string.format('%u', val.value)
		elseif(val.type == 'hex_uint64')then
			return string.format('%X', val.value)
		end
		print(val.type)
		print(val.value)
	end
end

function on_const(type, real_type, val)
	val_string = get_value_string(val)
	g_fout:write(type .. real_type .. val_string)
end

function on_enum_begin(name)
	g_fout:write('enum ' .. name)
	g_fout:write('{')
end
-- val 只可能是int32类型
function on_enum_field(name, val, comment)
	g_fout:write(name .. ' ' .. val)
end

function on_enum_end()
	g_fout:write('}')
end

function on_union_begin(name, etype)
	g_fout:write('union ' .. name .. ' ' .. etype)
	g_fout:write('{')
end

function on_union_field(key, type, type_arg, real_type, real_type_arg, name, comment)
	g_fout:write(key .. ' ')
	if(type_arg ~= nil)then
		g_fout:write('char')
	elseif(real_type_arg ~= nil)then
		g_fout:write('char')
	else
		g_fout:write(type)
	end

	g_fout:write('    ' .. name)
	if(vec_size ~= nil)then
		g_fout:write('[' .. vec_size .. ']')
	end

	if(type_arg ~= nil)then
		g_fout:write('[' ..  type_arg .. ']')
	elseif(real_type_arg ~= nil)then
		g_fout:write('[' ..  real_type_arg .. ']')
	end

	if(comment ~= nil)then
		g_fout:write('//' .. comment)
	end
	g_fout:write('\n')
end

function on_union_end()
	g_fout:write('}')
end


function on_struct_begin(name)
	g_fout:write('struct ' .. name)
	g_fout:write('{')
end

function on_struct_field(op, op0, op1, type, type_arg, real_type, real_type_arg, vec_size, name, comment)
	if(op ~= nil)then
		op1_string = get_value_string(op1)
		g_fout:write('if ' .. ' (' .. op0 .. ' ' .. op .. ' ' .. op1_string .. ')')
		g_fout:write('{')
	end

	if(type_arg ~= nil)then
		g_fout:write('char')
	elseif(real_type_arg ~= nil)then
		g_fout:write('char')
	else
		g_fout:write(type)
	end

	g_fout:write('    ' .. name)
	if(vec_size ~= nil)then
		g_fout:write('[' .. vec_size .. ']')
	end

	if(type_arg ~= nil)then
		g_fout:write('[' ..  type_arg .. ']')
	elseif(real_type_arg ~= nil)then
		g_fout:write('[' ..  real_type_arg .. ']')
	end

	if(comment ~= nil)then
		g_fout:write('//' .. comment)
	end

	if(op ~= nil)then
		g_fout:write('}')
	end
	g_fout:write('\n')
end

function on_struct_end()
	g_fout:write('}')
end

function on_comment(comment)
	g_fout:write(comment)
end
