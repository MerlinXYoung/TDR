g_output_file = ''
g_fout = nil

function get_value_string(val)
	if(val.type == 'refer')then
		return val.value
	elseif(val.type == 'char')then
		return string.format("'%q'", val.value)
	elseif(val.type == 'bool')then
		if(val.value)then
			return 'true'
		else
			return 'false'
		end
	elseif(val.type == 'string')then
		return string.format('"%q"', val.value)
	elseif(val.type == 'int64')then
		return string.format('%d', val.value)
	elseif(val.type == 'hex_int64')then
		return string.format('%X', val.value)
	elseif(val.type == 'uint64')then
		return string.format('%u', val.value)
	elseif(val.type == 'hex_uint64')then
		return string.format('%X', val.value)
	end
end

function get_type_string(type)
	if(type.type == 'int8')then
		return 'int8'
	elseif(type.type == 'int16')then
		return 'int16'
	elseif(type.type == 'int32')then
		return 'int32'
	elseif(type.type == 'int64')then
		return 'int64'
	elseif(type.type == 'uint8')then
		return 'uint8'
	elseif(type.type == 'uint16')then
		return 'uint16'
	elseif(type.type == 'uint32')then
		return 'uint32'
	elseif(type.type == 'uint64')then
		return 'uint64'
	elseif(type.type == 'char')then
		return 'char'
	elseif(type.type == 'string')then
		return 'char'
	elseif(type.type == 'double')then
		return 'double'
	elseif(type.type == 'bool')then
		return 'bool'
	elseif(type.type == 'refer')then
		return type.refer
	end
end

function on_document_begin(file)
	len = string.len(file)
	prefix = string.sub(file, 1, len - 4)
	suffix = string.sub(file, len - 3, len)
	if(suffix == ".tdr")then
		g_output_file = prefix .. '_json_reader.c'
	else
		g_output_file = file .. '_json_reader.c'
	end

	g_fout = io.open(g_output_file, "w")
end

function on_document_end()
	g_fout.close()
end

function on_document_error()
	if(g_fout ~= nil)then
		g_fout:close()
	end
	os.remove(g_output_file)
end

function on_import(file)
	len = string.len(file)
	prefix = string.sub(file, 1, len - 4)
	suffix = string.sub(file, len - 3, len)
	if(suffix == ".tdr")then
		real_file = prefix .. '_json_reader.h'
	else
		real_file = name .. '_json_reader.h'
	end

	g_fout:write('#include "' .. real_file .. '"\n')
end

function on_typedef(type, name)
	type_string = get_type_string(type)
	g_fout:write(type_string .. name)
end

function on_const(type, real_type, val)
	type_string = get_type_string(type)
	if(real_type ~= nil)then
		real_type_string = get_type_string(real_type)
	else
		real_type_string = ''
	end
	val_string = get_value_string(val)
	g_fout:write(type_string .. real_type_string .. val_string)
end

function on_enum_begin(name)
	g_fout:write('enum ' .. name)
	g_fout:write('{')
end

function on_enum_field(name, val, comment)
	val_string = get_value_string(val)
	if(comment == nil)then
		comment = ''
	end
	g_fout:write(name .. ' ' .. val_string .. ' ' .. comment)
end

function on_enum_end()
	g_fout:write('}')
end

function on_union_begin(name, etype)
	g_fout:write('union ' .. name .. ' ' .. etype)
	g_fout:write('{')
end

function on_union_field(key, type, real_type, name, comment)
	g_fout:write(key .. ' ')
	type_string = get_type_string(type)

	g_fout:write('    ' .. type_string .. ' ' .. name)
	if(type.type == 'string')then
		g_fout:write('[' .. type.length .. ']')
	end

	if(comment ~= nil)then
		g_fout:write('//' .. comment)
	end
	g_fout:write('\n')
end

function on_union_end()
	g_fout:write('}')
end


function on_struct_begin(name)
	g_fout:write('struct ' .. name)
	g_fout:write('{')
end

function on_struct_field(condition, type, real_type, vec_size, name, comment)
	if(condition ~= nil)then
		if(condition.oper ~= nil)then
			op1_string = get_value_string(condition.op1)
			g_fout:write('if ' .. ' (' .. condition.op0 .. ' ' .. condition.oper .. ' ' .. op1_string .. ')')
			g_fout:write('{')
		else
			g_fout:write('if ' .. ' (' .. condition.op0 .. ')')
			g_fout:write('{')
		end
	end

	type_string = get_type_string(type)

	g_fout:write('    ' .. name)
	if(vec_size ~= nil)then
		g_fout:write('[' .. vec_size .. ']')
	end
	if(type.type == 'string')then
		g_fout:write('[' .. type.length .. ']')
	end

	if(comment ~= nil)then
		g_fout:write('//' .. comment)
	end

	if(condition ~= nil)then
		g_fout:write('}')
	end
	g_fout:write('\n')
end

function on_struct_end()
	g_fout:write('}')
end

function on_comment(comment)
	g_fout:write(comment)
end
